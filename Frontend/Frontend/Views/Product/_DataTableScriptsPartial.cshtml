@using Frontend.DTOs;
@using Frontend.Models.ViewModel.Product;
@using Frontend.Utilities;
@model ProductViewModel;
@{
    var common = new Common();
    var loginInfo = common.GetValueBySession();
}
<script>
    let urlDelete = '@Url.Content(Constants.UrlAction.Product.Delete)';
    let role = '@Model.role';

    $(document).ready(function () {
        setSelect2();
        ClearDataTable("dtResult");
        GetList();
    });

    function test() {
        $('#txtProduct').val(null).trigger('change');
        $("#txtProduct").select2("val", "");
        $('#txtProduct').val('').trigger('change');
    }
    function GetList() {
        $.ajax({
            type: "POST",
            url: '@Url.Content(Constants.UrlAction.Product.GetList)',
            dataType: "json",
            data: {
                ProductId: $('#txtProduct').val(),
                CategoryId: $('#ddlCategory').val(),
                IsActive: $('#ddlStatus').val()
            },
            success: OnSuccess
        })
    }
    function OnSuccess(response) {
        $('#dtResult').DataTable({
            bDestroy: true,
            bProcessing: true,
            bLenghtChange: true,
            lengthMenu: [[5, 10, 25, -1], [5, 10, 25, "All"]],
            bfilter: true,
            bSort: true,
            bPaginate: true,
            data: response.value,
            columns: [
                {
                    data: 'ProductName',
                    render: function (data, type, row, meta) {
                        return row.productName
                    }
                },
                {
                    data: 'CategoryName',
                    render: function (data, type, row, meta) {
                        return row.categoryName
                    }
                },
                {
                    data: 'Price',
                    render: function (data, type, row, meta) {
                        if (row.price === null) return "";
                        return commaSeparateNumber(row.price);
                    }
                },
                {
                    data: 'Stock',
                    render: function (data, type, row, meta) {
                        if (row.stock === null) return "";
                        return commaSeparateNumber(row.stock);
                    }
                },
                {
                    data: 'CreateBy',
                    render: function (data, type, row, meta) {
                        return row.createBy
                    }
                },
                {
                    data: 'CreateDate',
                    render: function (data, type, row, meta) {
                        if (row.createDate === null) return "";
                        return moment(row.createDate).format('DD/MM/YYYY');
                    }
                },
                {
                    data: 'IsActive',
                    render: function (data, type, row, meta) {
                        switch (row.isActive) {
                            case "A":
                                return '<span class="badge bg-success">'
                                    + '' + 'Active' + ''
                                    + '</span>'
                                break;
                            case "I":
                                return '<span class="badge bg-dark">'
                                    + '' + 'InActive' + ''
                                    + '</span> '
                                break;
                            default:
                                return "";
                                break;
                        }
                    }
                },
                {
                    data: 'null',
                    render: function (data, type, row, meta) {
                        if (role != "Manager") {
                            return '<a class="btn btn-info me-2" onclick=PopupDetail("' + row.id + '","View");>'
                                + '<i class="bi bi-search"></i></a>';
                        }
                        else {
                            return '<a class="btn btn-info me-2" onclick=PopupDetail("' + row.id + '","View");>'
                                + '<i class="bi bi-search"></i></a>'
                                + '<a class="btn btn-warning me-2" onclick=PopupDetail("' + row.id + '","Edit");>'
                                + '<i class="bi bi-pencil-fill"></i></a>'
                                + '<a class="btn btn-danger" onclick=Delete("' + row.id + '","' + row.productName + '","' + urlDelete + '");>'
                                + '<i class="bi bi-trash-fill"></a>'
                        }
                    }
                }
            ]
        });
    }
    function PopupDetail(id, action) {
        var data = { "id": id, "action": action };
        modalPOST(action + " " + "Product", "Product", "_Detail", data, 50);
    };
    function setSelect2() {
        $("#txtProduct").select2({
            placeholder: '---- Please Select ----',
            minimumInputLength: 3,
            dropdownAutoWidth: 'true',
            width: '100%',
            allowClear: true,
            ajax: {
                url: '@Url.Content(Constants.UrlAction.Product.select2Product)',
                delay: 50,
                dataType: 'json',
                quietMillis: 1000,
                data: function (params) {
                    return { query: params.term };
                },
                processResults: function (data) {
                    return {
                        results: $.map(data, function (obj) {
                            return {
                                id: obj.id,
                                text: obj.productName
                            };
                        })
                    };
                }
            }
        });
    }
</script>